{"ast":null,"code":"var _jsxFileName = \"/Users/choegilang/Documents/GitHub/code-container/front/src/components/common/StackList.tsx\",\n  _s = $RefreshSig$();\nimport { styled } from \"styled-components\";\nimport { frontend, backend } from \"../../constant/stackList\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectStack } from \"../../redux/actions/stack\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StackList() {\n  _s();\n  const [clickStack, setClickStack] = useState();\n\n  // 선택한 스택\n  const selectedStack = useSelector(state => state.stack.stack);\n\n  // 스택 선택\n  const dispatch = useDispatch();\n\n  // redux 선택한 stack 저장하기\n  const handleSelectStack = stack => {\n    dispatch(selectStack(stack));\n    setClickStack(selectedStack === stack);\n  };\n\n  // 스택 모음\n  const stacks = {\n    FRONTEND: frontend,\n    BACKEND: backend\n  };\n\n  // 스택 항목 렌더링\n  const renderStackItems = (stackType, stackList) => {\n    return Object.keys(stackList).map(stack => /*#__PURE__*/_jsxDEV(StackItem, {\n      onClick: () => handleSelectStack(stack),\n      stack: clickStack,\n      children: stackList[stack]\n    }, stack, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this));\n  };\n\n  // 각각의 스택 목록을 렌더링\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: Object.entries(stacks).map(([stackType, stackList]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: stackType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DividStack, {\n        children: renderStackItems(stackType, stackList)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, stackType, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(StackList, \"Mgged5gCUfi7+ee95GhEmUuTc50=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = StackList;\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px;\n  color: white;\n  border-right: solid 3px rgba(255, 255, 255, 0.4);\n`;\n\n// 스택 목록\n_c2 = Container;\nconst DividStack = styled.ul`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n_c3 = DividStack;\nconst Title = styled.p`\n  width: 100%;\n  height: 30px;\n  padding: 20px 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  letter-spacing: 2px;\n  font-size: 21px;\n  font-weight: bold;\n  border: solid 2px green;\n  border-radius: 3px;\n`;\n\n// 개별 스택\n_c4 = Title;\nconst StackItem = styled.li`\n  width: 100%;\n  min-height: 50px;\n  background-color: ${props => props.stack ? \"rgba(255, 255, 255, 0.5)\" : \"none\"};\n  padding: 10px;\n  font-size: 18px;\n  transition: all 0.3s;\n  border-radius: 5px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n`;\n_c5 = StackItem;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"StackList\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"DividStack\");\n$RefreshReg$(_c4, \"Title\");\n$RefreshReg$(_c5, \"StackItem\");","map":{"version":3,"names":["styled","frontend","backend","useDispatch","useSelector","selectStack","useState","jsxDEV","_jsxDEV","StackList","_s","clickStack","setClickStack","selectedStack","state","stack","dispatch","handleSelectStack","stacks","FRONTEND","BACKEND","renderStackItems","stackType","stackList","Object","keys","map","StackItem","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","Container","entries","Title","DividStack","_c","div","_c2","ul","_c3","p","_c4","li","props","_c5","$RefreshReg$"],"sources":["/Users/choegilang/Documents/GitHub/code-container/front/src/components/common/StackList.tsx"],"sourcesContent":["import { styled } from \"styled-components\";\nimport { frontend, backend } from \"../../constant/stackList\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectStack } from \"../../redux/actions/stack\";\nimport { RootState } from \"../../redux/store/store\";\nimport { useEffect, useState } from \"react\";\n\ntype StackProp = {\n  stack: boolean;\n};\n\nexport default function StackList() {\n  const [clickStack, setClickStack] = useState<boolean>();\n\n  // 선택한 스택\n  const selectedStack = useSelector((state: RootState) => state.stack.stack);\n\n  // 스택 선택\n  const dispatch = useDispatch();\n\n  // redux 선택한 stack 저장하기\n  const handleSelectStack = (stack: string) => {\n    dispatch(selectStack(stack));\n    setClickStack(selectedStack === stack);\n  };\n\n  // 스택 모음\n  const stacks = {\n    FRONTEND: frontend,\n    BACKEND: backend,\n  };\n\n  // 스택 항목 렌더링\n  const renderStackItems = (\n    stackType: string,\n    stackList: { [key: string]: string }\n  ) => {\n    return Object.keys(stackList).map((stack) => (\n      <StackItem\n        key={stack}\n        onClick={() => handleSelectStack(stack)}\n        stack={clickStack}\n      >\n        {stackList[stack]}\n      </StackItem>\n    ));\n  };\n\n  // 각각의 스택 목록을 렌더링\n  return (\n    <Container>\n      {Object.entries(stacks).map(([stackType, stackList]) => (\n        <div key={stackType}>\n          <Title>{stackType}</Title>\n          <DividStack>{renderStackItems(stackType, stackList)}</DividStack>\n        </div>\n      ))}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px;\n  color: white;\n  border-right: solid 3px rgba(255, 255, 255, 0.4);\n`;\n\n// 스택 목록\nconst DividStack = styled.ul`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nconst Title = styled.p`\n  width: 100%;\n  height: 30px;\n  padding: 20px 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  letter-spacing: 2px;\n  font-size: 21px;\n  font-weight: bold;\n  border: solid 2px green;\n  border-radius: 3px;\n`;\n\n// 개별 스택\nconst StackItem = styled.li<StackProp>`\n  width: 100%;\n  min-height: 50px;\n  background-color: ${(props) =>\n    props.stack ? \"rgba(255, 255, 255, 0.5)\" : \"none\"};\n  padding: 10px;\n  font-size: 18px;\n  transition: all 0.3s;\n  border-radius: 5px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n`;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}